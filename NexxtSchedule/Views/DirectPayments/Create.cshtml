@model NexxtSchedule.Models.DirectPayment

@{
    ViewBag.Title = @Resources.Resource.ViewCreate;
}

<h2>@Resources.Resource.ViewCreate</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@Resources.Resource.DirectPayment_IndexView_Titulo1</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.CompanyId)

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.NotaCobro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NotaCobro, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NotaCobro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProfessionalId, "ProfessionalId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProfessionalId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProfessionalId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.TasaProfesional, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TasaProfesional, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TasaProfesional, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientId, "ClientId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ClientId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ClientId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceCategoryId, "ServiceCategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ServiceCategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ServiceCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ServiceId, "ServiceId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ServiceId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.ServicioNombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ServicioNombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServicioNombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.Tasa, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Tasa, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Tasa, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LevelPriceId, "LevelPriceId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("LevelPriceId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LevelPriceId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Precio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Precio, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Precio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cantidad, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cantidad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-success btn-sm" onclick="location.href ='@Url.Action("Index", new {})'">
                    <span class="glyphicon glyphicon-chevron-left"></span> @Resources.Resource.ButtonBack
                </button>
                <button type="submit" class="btn btn-primary btn-sm">
                    <span class="glyphicon glyphicon-floppy-disk"></span> @Resources.Resource.ButtonSave
                </button>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function ()
        {
            $("#ServiceCategoryId").change(function ()
            {
                $("#ServiceId").empty();
                $("#Precio").val(0);
                $("#Cantidad").val(0);
                $("#Total").val(0);
                $("#ServiceId").append('<option value="0">[Seleccione Ciudad...]</option>');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetServices")',
                    dataType: 'json',
                    data: { CategoryId: $("#ServiceCategoryId").val() },
                    success: function (data)
                    {
                        $.each(data, function (i, data)
                        {
                            $("#ServiceId").append('<option value="'
                             + data.ServiceId + '">'
                             + data.Servicio + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Error de Lectura de Relacion' + ex);
                    }
                });
                return false;
            })

            $("#ProfessionalId").change(function ()
            {
                    $("#TasaProfesional").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetProfesional")',
                        dataType: 'json',
                        data: { ProfessionalId: $("#ProfessionalId").val() },
                        success: function (data)
                        {
                            //console.log(data);
                           $("#TasaProfesional").val(data);
                        },
                        error: function (ex)
                        {
                            alert('Error de Lectura de Relacion' + ex);
                        }
                    });
                    return false;
            })

            $("#LevelPriceId").change(function ()
            {
                $("#Precio").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetPrecio")',
                        dataType: 'json',
                        data: { ServiceId: $("#ServiceId").val(), LevelPriceId: $("#LevelPriceId").val() },
                        success: function (data)
                        {
                            //console.log(data);
                           $("#Precio").val(data);
                        },
                        error: function (ex)
                        {
                            alert('Error de Lectura de Relacion' + ex);
                        }
                    });
                    return false;
            })

            $("#ServiceId").change(function ()
            {
                $("#Precio").val(0);
                $("#Cantidad").val(0);
                $("#Total").val(0);
             });

            $("#Precio, #Cantidad").on("input", function ()
            {
                var val1 = parseInt($('#Precio').val());
                var val2 = parseInt($('#Cantidad').val());

                if (!isNaN(val1) && !isNaN(val2))
                    $('#Total').val(val1 * val2);
            });
        });
    </script>

}
